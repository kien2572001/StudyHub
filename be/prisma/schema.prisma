// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  role          String         @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  cardTemplates CardTemplate[]
  decks         Deck[]
  books         Book[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Language {
  id        Int      @id @default(autoincrement())
  code      String   @unique // Ví dụ: en, ja, vi, etc.
  name      String
  isRtl     Boolean  @default(false)
  hasKanji  Boolean  @default(false)

  // Relations
  decks     Deck[]
}

model CardTemplate {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?  @db.Text
  frontStructure  Json     // Structure definition for front side
  backStructure   Json     // Structure definition for back side
  isSystem        Boolean  @default(false) // True for built-in templates
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  //cards           Card[]
}

model Deck {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?   @db.Text
  path            String    // Hierarchical path like 1/2/3/4
  level           Int       @default(1) // Depth in hierarchy
  color           String?
  isPublic        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  // Relations
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  parentDeckId    Int?
  parentDeck      Deck?     @relation("DeckHierarchy", fields: [parentDeckId], references: [id])
  childDecks      Deck[]    @relation("DeckHierarchy")
  languageId      Int?
  language        Language? @relation(fields: [languageId], references: [id])
  //cards           Card[]
}

model Book {
  id            Int           @id @default(autoincrement())
  title         String
  author        String?       // Tên tác giả
  description   String?       @db.Text
  coverUrl      String?
  fileUrl       String        // URL tới file sách
  fileFormat    String    // Định dạng file: PDF, EPUB, MOBI, TXT...
  fileSize      Int           // Kích thước file (bytes)
  pageCount     Int?          // Số trang (nếu có)
  contentHash   String?       // Hash của nội dung để tìm kiếm
  uploadDate    DateTime      @default(now())
  lastOpened    DateTime?     // Thời điểm sách được mở lần cuối
  readingPage   Int?          // Trang hiện tại khi đọc
  tags          String?       // Lưu dạng chuỗi JSON: ["fiction", "thriller"]

  // Relations
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  //notes         Note[]
  //bookmarks     Bookmark[]
  //bookContent   BookContent?
}
